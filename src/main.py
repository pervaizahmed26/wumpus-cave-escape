"""
Main execution script for Wumpus Cave Escape assignment.

This script coordinates the entire pipeline from map parsing to solution generation.
File naming convention: mapXYZ.txt -> mapXYZ.pddl -> mapXYZ.pddl.soln -> mapXYZ-solution.txt
"""

import argparse
import os
import sys
from pathlib import Path

from map_parser import MapParser
from pddl_generator import PDDLGenerator
from solution_converter import SolutionConverter


class WumpusEscapeMain:
    """Main class for coordinating the Wumpus Cave Escape pipeline."""
    
    def __init__(self):
        self.map_parser = MapParser()
        self.pddl_generator = PDDLGenerator()
        self.solution_converter = SolutionConverter()
    
    def process_map(self, map_file: str, output_dir: str = None) -> str:
        """
        Process a single map file through the complete pipeline.
        
        Args:
            map_file: Path to the input map file (e.g., map001.txt)
            output_dir: Directory for output files (optional)
            
        Returns:
            Path to the final solution file
        """
        if output_dir is None:
            output_dir = "."
        
        # Create output directories
        problems_dir = os.path.join(output_dir, "problems")
        solutions_dir = os.path.join(output_dir, "solutions")
        final_solutions_dir = os.path.join(output_dir, "final_solutions")
        
        os.makedirs(problems_dir, exist_ok=True)
        os.makedirs(solutions_dir, exist_ok=True)
        os.makedirs(final_solutions_dir, exist_ok=True)
        
        # Get base filename (e.g., map001)
        base_name = Path(map_file).stem
        
        # Step 1: Parse the map
        print(f"Parsing map file: {map_file}")
        try:
            map_data = self.map_parser.parse_map_file(map_file)
            print(f"Map parsed successfully. Dimensions: {map_data['dimensions']}")
            print(f"Agent at: {map_data['agent_position']}")
            print(f"Wumpus at: {map_data['wumpus_positions']}")
            print(f"Arrows at: {map_data['arrow_positions']}")
            print(f"Crates at: {map_data['crate_positions']}")
            print(f"Pits at: {map_data['pit_positions']}")
        except Exception as e:
            print(f"Error parsing map: {e}")
            return None
        
        # Step 2: Generate PDDL problem file (mapXYZ.pddl)
        problem_file = os.path.join(problems_dir, f"{base_name}.pddl")
        print(f"Generating PDDL problem file: {problem_file}")
        try:
            self.pddl_generator.generate_problem_file(map_data, problem_file)
            print("PDDL problem file generated successfully.")
        except Exception as e:
            print(f"Error generating PDDL problem: {e}")
            return None
        
        # Step 3: Call PDDL planner (placeholder - would need actual planner)
        solution_file = os.path.join(solutions_dir, f"{base_name}.pddl.soln")
        print(f"Calling PDDL planner... (placeholder)")
        print(f"Expected planner output: {solution_file}")
        
        # Note: In a real implementation, you would call an actual PDDL planner here
        # For now, we'll create a placeholder solution file
        self._create_placeholder_solution(solution_file)
        
        # Step 4: Convert solution to required format (mapXYZ-solution.txt)
        final_solution_file = os.path.join(final_solutions_dir, f"{base_name}-solution.txt")
        print(f"Converting solution to required format: {final_solution_file}")
        try:
            self.solution_converter.convert_solution(solution_file, final_solution_file)
            print("Solution converted successfully.")
        except Exception as e:
            print(f"Error converting solution: {e}")
            return None
        
        return final_solution_file
    
    def _create_placeholder_solution(self, solution_file: str) -> None:
        """Create a placeholder PDDL solution file for testing."""
        placeholder_content = """; Placeholder PDDL solution for Wumpus Cave Escape
; In a real implementation, this would be generated by a PDDL planner
; like Fast-Forward (FF), Fast-Downward, or similar
; This solution assumes agent starts at (2,2) and escapes north

(walk agent loc_2_2 loc_1_2 north)
(walk agent loc_1_2 loc_0_2 north)
(walk agent loc_0_2 loc_-1_2 north)
"""
        
        with open(solution_file, 'w') as f:
            f.write(placeholder_content)
    
    def run_interactive_mode(self):
        """Run the program in interactive mode."""
        print("=== Wumpus Cave Escape - Interactive Mode ===")
        print()
        
        while True:
            print("Options:")
            print("1. Process a single map file")
            print("2. List available maps")
            print("3. Exit")
            
            choice = input("Enter your choice (1-3): ").strip()
            
            if choice == '1':
                map_file = input("Enter path to map file: ").strip()
                if os.path.exists(map_file):
                    result = self.process_map(map_file)
                    if result:
                        print(f"Processing completed! Final solution: {result}")
                    else:
                        print("Processing failed!")
                else:
                    print(f"Map file not found: {map_file}")
            
            elif choice == '2':
                self._list_available_maps()
            
            elif choice == '3':
                print("Goodbye!")
                break
            
            else:
                print("Invalid choice. Please try again.")
            
            print()
    
    def _list_available_maps(self):
        """List available map files."""
        maps_dir = "maps"
        if os.path.exists(maps_dir):
            map_files = [f for f in os.listdir(maps_dir) if f.endswith('.txt')]
            if map_files:
                print("Available maps:")
                for i, map_file in enumerate(map_files, 1):
                    print(f"  {i}. {map_file}")
            else:
                print("No map files found in maps/ directory")
        else:
            print("Maps directory not found")


def main():
    """Main entry point."""
    parser = argparse.ArgumentParser(
        description="Wumpus Cave Escape - PDDL-based solution generator"
    )
    
    parser.add_argument(
        '--map', '-m',
        type=str,
        help='Path to the input map file'
    )
    
    parser.add_argument(
        '--output-dir', '-o',
        type=str,
        default='.',
        help='Output directory for generated files (default: current directory)'
    )
    
    parser.add_argument(
        '--interactive', '-i',
        action='store_true',
        help='Run in interactive mode'
    )
    
    args = parser.parse_args()
    
    # Initialize main class
    wumpus_main = WumpusEscapeMain()
    
    if args.interactive:
        wumpus_main.run_interactive_mode()
    elif args.map:
        result = wumpus_main.process_map(args.map, args.output_dir)
        if result:
            print(f"Processing completed successfully!")
            print(f"Final solution saved to: {result}")
        else:
            print("Processing failed!")
            sys.exit(1)
    else:
        print("No map file specified. Use --map option or --interactive mode.")
        parser.print_help()
        sys.exit(1)


if __name__ == "__main__":
    main() 